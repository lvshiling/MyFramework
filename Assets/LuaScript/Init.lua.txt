
--[["files.associations": {
    "*.txt":"lua"
},]]


--CS.GameFramework.LuaManager.Instance:RequireLua( "LuaDebug", function() StartDebug( "localhost",7003 ); end );
--require "ltn12"

--[[测试rapidjson
local rapidjson = require('rapidjson')
local t = rapidjson.decode('{"a":123}')
print(t.a)
t.a = 456
local s = rapidjson.encode(t)
print('json', s)]]
--测试pbc
local pb = require 'protobuf'
pb.register( CS.Game.LuaHelper.LoadPb('loginForLua') )

local login = {}
login.id = 1000;
login.name = "zyp";
login.email = "1@qq.com";

--序列化
local encode = pb.encode('msg.LoginRequest', login)

-- 反序列化
local login_decode = pb.decode('msg.LoginRequest', encode)
print( login_decode.id, login_decode.name, login_decode.email )
function TestPbc( _msg )
    print( _msg );
    local login_decode1 = pb.decode( 'msg.LoginRequest', _msg )
    print( login_decode1.id, login_decode1.name, login_decode1.email, login_decode1.sid )
end

--测试新lua_proto
--[[local pb = require 'pb'
assert( pb.load( CS.Game.LuaHelper.LoadPb('loginForLua') ) );
local login = {}
login.id = 1000;
login.name = "zyp";
login.email = "1@qq.com";

--序列化
local encode = pb.encode('msg.LoginRequest', login)
print( encode );
-- 反序列化
local login_decode = pb.decode('msg.LoginRequest', encode)

print( login_decode.id, login_decode.name, login_decode.email )

function TestPb( _msg )
    print( _msg );
    local login_decode1 = pb.decode( 'msg.LoginRequest', _msg )
    print( login_decode1.id, login_decode1.name, login_decode1.email )
end]]



